
build/bubble_sort/bubble_sort.o:     Dateiformat elf64-x86-64


Disassembly of section .text:

0000000000000000 <bubbleSort>:
#include <stdio.h>
#include <stdlib.h>

// Funktion f端r Bubble Sort mit Cache-Optimierungen
void bubbleSort(int array[], int length) {
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    int i, j, tmp;
    int swapped;
    
    for (i = 1; i < length; i++) {
   f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
  16:	e9 d2 00 00 00       	jmp    ed <bubbleSort+0xed>
        swapped = 0; // Flag, um zu 端berpr端fen, ob in dieser Iteration Vertauschungen stattgefunden haben
  1b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
        for (j = 0; j < length - i; j++) {
  22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  29:	e9 a6 00 00 00       	jmp    d4 <bubbleSort+0xd4>
            if (array[j] > array[j + 1]) {
  2e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  31:	48 98                	cltq   
  33:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  3a:	00 
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 01 d0             	add    %rdx,%rax
  42:	8b 10                	mov    (%rax),%edx
  44:	8b 45 f4             	mov    -0xc(%rbp),%eax
  47:	48 98                	cltq   
  49:	48 83 c0 01          	add    $0x1,%rax
  4d:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
  54:	00 
  55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  59:	48 01 c8             	add    %rcx,%rax
  5c:	8b 00                	mov    (%rax),%eax
  5e:	39 c2                	cmp    %eax,%edx
  60:	7e 6e                	jle    d0 <bubbleSort+0xd0>
                tmp = array[j];
  62:	8b 45 f4             	mov    -0xc(%rbp),%eax
  65:	48 98                	cltq   
  67:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  6e:	00 
  6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  73:	48 01 d0             	add    %rdx,%rax
  76:	8b 00                	mov    (%rax),%eax
  78:	89 45 fc             	mov    %eax,-0x4(%rbp)
                array[j] = array[j + 1];
  7b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  7e:	48 98                	cltq   
  80:	48 83 c0 01          	add    $0x1,%rax
  84:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  8b:	00 
  8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  90:	48 01 d0             	add    %rdx,%rax
  93:	8b 55 f4             	mov    -0xc(%rbp),%edx
  96:	48 63 d2             	movslq %edx,%rdx
  99:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
  a0:	00 
  a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a5:	48 01 ca             	add    %rcx,%rdx
  a8:	8b 00                	mov    (%rax),%eax
  aa:	89 02                	mov    %eax,(%rdx)
                array[j + 1] = tmp;
  ac:	8b 45 f4             	mov    -0xc(%rbp),%eax
  af:	48 98                	cltq   
  b1:	48 83 c0 01          	add    $0x1,%rax
  b5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  bc:	00 
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c1:	48 01 c2             	add    %rax,%rdx
  c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  c7:	89 02                	mov    %eax,(%rdx)
                swapped = 1; // Es wurde eine Vertauschung durchgef端hrt
  c9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
        for (j = 0; j < length - i; j++) {
  d0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  d4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  d7:	2b 45 f0             	sub    -0x10(%rbp),%eax
  da:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  dd:	0f 8c 4b ff ff ff    	jl     2e <bubbleSort+0x2e>
            }
        }
        if (swapped == 0) {
  e3:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  e7:	74 12                	je     fb <bubbleSort+0xfb>
    for (i = 1; i < length; i++) {
  e9:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  ed:	8b 45 f0             	mov    -0x10(%rbp),%eax
  f0:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  f3:	0f 8c 22 ff ff ff    	jl     1b <bubbleSort+0x1b>
            // Keine Vertauschungen in dieser Iteration, das Array ist bereits sortiert
            break;
        }
    }
}
  f9:	eb 01                	jmp    fc <bubbleSort+0xfc>
            break;
  fb:	90                   	nop
}
  fc:	90                   	nop
  fd:	5d                   	pop    %rbp
  fe:	c3                   	ret    

00000000000000ff <printArray>:

// Hilfsfunktion zum Drucken eines Arrays
void printArray(int array[], int size) {
  ff:	f3 0f 1e fa          	endbr64 
 103:	55                   	push   %rbp
 104:	48 89 e5             	mov    %rsp,%rbp
 107:	48 83 ec 20          	sub    $0x20,%rsp
 10b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
 10f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    for (int i = 0; i < size; i++) {
 112:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
 119:	eb 30                	jmp    14b <printArray+0x4c>
        printf("%d ", array[i]);
 11b:	8b 45 fc             	mov    -0x4(%rbp),%eax
 11e:	48 98                	cltq   
 120:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 127:	00 
 128:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12c:	48 01 d0             	add    %rdx,%rax
 12f:	8b 00                	mov    (%rax),%eax
 131:	89 c6                	mov    %eax,%esi
 133:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13a <printArray+0x3b>
 13a:	48 89 c7             	mov    %rax,%rdi
 13d:	b8 00 00 00 00       	mov    $0x0,%eax
 142:	e8 00 00 00 00       	call   147 <printArray+0x48>
    for (int i = 0; i < size; i++) {
 147:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 14b:	8b 45 fc             	mov    -0x4(%rbp),%eax
 14e:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
 151:	7c c8                	jl     11b <printArray+0x1c>
    }
    printf("\n");
 153:	bf 0a 00 00 00       	mov    $0xa,%edi
 158:	e8 00 00 00 00       	call   15d <printArray+0x5e>
}
 15d:	90                   	nop
 15e:	c9                   	leave  
 15f:	c3                   	ret    

