
build/bubble_sort/bubble_sort.o:     Dateiformat elf64-x86-64


Disassembly of section .text:

0000000000000000 <bubbleSort>:
#include <stdio.h>
#include <stdlib.h>

// Funktion f√ºr Bubble Sort
void bubbleSort(int array[], int length){
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   int i, j, tmp;
   for (i = 1; i < length; i++){
   f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  16:	e9 be 00 00 00       	jmp    d9 <bubbleSort+0xd9>
      for (j = 0; j < length - i; j++){
  1b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  22:	e9 9f 00 00 00       	jmp    c6 <bubbleSort+0xc6>
          if (array[j] > array[j + 1]){
  27:	8b 45 f8             	mov    -0x8(%rbp),%eax
  2a:	48 98                	cltq   
  2c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  33:	00 
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 01 d0             	add    %rdx,%rax
  3b:	8b 10                	mov    (%rax),%edx
  3d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40:	48 98                	cltq   
  42:	48 83 c0 01          	add    $0x1,%rax
  46:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
  4d:	00 
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	48 01 c8             	add    %rcx,%rax
  55:	8b 00                	mov    (%rax),%eax
  57:	39 c2                	cmp    %eax,%edx
  59:	7e 67                	jle    c2 <bubbleSort+0xc2>
              tmp = array[j];
  5b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  5e:	48 98                	cltq   
  60:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  67:	00 
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	48 01 d0             	add    %rdx,%rax
  6f:	8b 00                	mov    (%rax),%eax
  71:	89 45 fc             	mov    %eax,-0x4(%rbp)
              array[j] = array[j + 1];
  74:	8b 45 f8             	mov    -0x8(%rbp),%eax
  77:	48 98                	cltq   
  79:	48 83 c0 01          	add    $0x1,%rax
  7d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  84:	00 
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	48 01 d0             	add    %rdx,%rax
  8c:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8f:	48 63 d2             	movslq %edx,%rdx
  92:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
  99:	00 
  9a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  9e:	48 01 ca             	add    %rcx,%rdx
  a1:	8b 00                	mov    (%rax),%eax
  a3:	89 02                	mov    %eax,(%rdx)
              array[j + 1] = tmp;
  a5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  a8:	48 98                	cltq   
  aa:	48 83 c0 01          	add    $0x1,%rax
  ae:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  b5:	00 
  b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ba:	48 01 c2             	add    %rax,%rdx
  bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  c0:	89 02                	mov    %eax,(%rdx)
      for (j = 0; j < length - i; j++){
  c2:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  c6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  c9:	2b 45 f4             	sub    -0xc(%rbp),%eax
  cc:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  cf:	0f 8c 52 ff ff ff    	jl     27 <bubbleSort+0x27>
   for (i = 1; i < length; i++){
  d5:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  dc:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  df:	0f 8c 36 ff ff ff    	jl     1b <bubbleSort+0x1b>
          }
      }
   }
}
  e5:	90                   	nop
  e6:	90                   	nop
  e7:	5d                   	pop    %rbp
  e8:	c3                   	ret    

00000000000000e9 <printArray>:

// Hilfsfunktion zum Drucken eines Arrays
void printArray(int array[], int size) {
  e9:	f3 0f 1e fa          	endbr64 
  ed:	55                   	push   %rbp
  ee:	48 89 e5             	mov    %rsp,%rbp
  f1:	48 83 ec 20          	sub    $0x20,%rsp
  f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  f9:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  for (int i = 0; i < size; i++) {
  fc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
 103:	eb 30                	jmp    135 <printArray+0x4c>
    printf("%d ", array[i]);
 105:	8b 45 fc             	mov    -0x4(%rbp),%eax
 108:	48 98                	cltq   
 10a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 111:	00 
 112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 116:	48 01 d0             	add    %rdx,%rax
 119:	8b 00                	mov    (%rax),%eax
 11b:	89 c6                	mov    %eax,%esi
 11d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 124 <printArray+0x3b>
 124:	48 89 c7             	mov    %rax,%rdi
 127:	b8 00 00 00 00       	mov    $0x0,%eax
 12c:	e8 00 00 00 00       	call   131 <printArray+0x48>
  for (int i = 0; i < size; i++) {
 131:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 135:	8b 45 fc             	mov    -0x4(%rbp),%eax
 138:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
 13b:	7c c8                	jl     105 <printArray+0x1c>
  }
  printf("\n");
 13d:	bf 0a 00 00 00       	mov    $0xa,%edi
 142:	e8 00 00 00 00       	call   147 <printArray+0x5e>
}
 147:	90                   	nop
 148:	c9                   	leave  
 149:	c3                   	ret    

000000000000014a <main>:

// Hauptfunktion
int main() {
 14a:	f3 0f 1e fa          	endbr64 
 14e:	55                   	push   %rbp
 14f:	48 89 e5             	mov    %rsp,%rbp
 152:	48 81 ec b0 0b 00 00 	sub    $0xbb0,%rsp
 159:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
 160:	00 00 
 162:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 166:	31 c0                	xor    %eax,%eax
  int array[] = {673, 204, 912, 621, 430, 192, 899, 587, 76, 928, 387, 541, 314, 843, 657, 38, 501, 712, 199, 857, 724, 146, 383, 661, 299, 553, 908, 45, 528, 786, 963, 108, 321, 792, 562, 868, 180, 453, 645, 7, 678, 115, 855, 245, 962, 594, 380, 728, 813, 288, 491, 40, 206, 917, 647, 734, 176, 321, 945, 567, 84, 341, 576, 229, 937, 513, 648, 875, 19, 452, 732, 297, 85, 779, 603, 853, 365, 749, 106, 322, 890, 665, 206, 985, 462, 738, 859, 640, 286, 118, 552, 787, 392, 637, 137, 471, 776, 32, 190, 609, 468, 889, 397, 222, 515, 954, 102, 488, 758, 499, 841, 709, 941, 212, 714, 568, 892, 100, 503, 782, 991, 707, 127, 297, 967, 250, 529, 874, 722, 432, 296, 646, 433, 70, 726, 409, 884, 267, 644, 897, 230, 602, 92, 566, 915, 10, 537, 835, 253, 479, 320, 61, 970, 614, 123, 921, 228, 484, 787, 128, 778, 565, 151, 372, 20, 747, 204, 862, 725, 901, 508, 363, 30, 936, 320, 622, 147, 586, 856, 278, 913, 506, 214, 926, 467, 162, 808, 343, 95, 276, 554, 271, 768, 383, 825, 570, 898, 37, 604, 879, 139, 464, 321, 984, 732, 55, 853, 197, 676, 281, 596, 35, 421, 963, 799, 505, 178, 570, 349, 661, 206, 980, 735, 189, 660, 999, 793, 422, 286, 605, 482, 815, 671, 270, 622, 936, 101, 470, 702, 82, 433, 122, 586, 269, 57, 895, 644, 11, 757, 256, 572, 748, 518, 320, 968, 705, 459, 829, 300, 551, 47, 962, 751, 5, 514, 280, 647, 423, 60, 806, 515, 190, 705, 824, 74, 307, 82, 418, 883, 143, 562, 386, 701, 965, 684, 396, 142, 597, 864, 219, 839, 160, 14, 685, 321, 20, 647, 528, 942, 332, 578, 868, 269, 759, 155, 333, 267, 718, 491, 54, 804, 648, 462, 710, 963, 724, 45, 529, 431, 107, 657, 198, 849, 525, 296, 820, 654, 48, 419, 959, 146, 642, 218, 793, 51, 844, 610, 51, 37, 942, 154, 731, 579, 484, 61, 648, 721, 235, 924, 694, 20, 305, 864, 263, 521, 784, 375, 860, 179, 586, 270, 526, 976, 410, 658, 228, 725, 351, 990, 447, 761, 225, 814, 573, 63, 47, 856, 974, 233, 512, 85, 43, 782, 136, 958, 646, 284, 421, 868, 699, 288, 219, 431, 846, 724, 157, 752, 937, 103, 856, 41, 725, 10, 822, 644, 113, 534, 266, 769, 368, 161, 532, 94, 9, 672, 364, 708, 951, 319, 246, 601, 395, 122, 912, 283, 567, 795, 682, 456, 219, 781, 605, 28, 797, 155, 563, 623, 176, 654, 972, 47, 707, 894, 40, 867, 58, 203, 528, 997, 803, 301, 768, 519, 345, 660, 342, 699, 854, 551, 301, 774, 896, 62, 310, 649, 317, 944, 240, 469, 764, 680, 74, 82, 910, 251, 357, 771, 273, 187, 792, 576, 971, 801, 349, 315, 471, 657, 336, 112, 414, 383, 620, 243, 396, 963, 4, 295, 791, 930, 428, 383, 689, 68, 734, 357, 47, 583, 846, 910, 504, 295, 603, 239, 764, 31, 535, 847, 186, 720, 173, 951, 482, 268, 124, 830, 679, 289, 645, 488, 77, 768, 408, 34, 843, 520, 9, 274, 609, 647, 197, 49, 911, 128, 768, 168, 507, 441, 791, 648, 270, 530, 52, 227, 756, 409, 975, 78, 670, 542, 67, 793, 17, 285, 569, 409, 726, 950, 25, 520, 298, 858, 619, 199, 903, 664, 46, 195, 897, 736, 396, 26, 394, 481, 785, 51, 974, 42, 797, 763, 518, 386, 934, 272, 982, 748, 403, 758, 539, 237, 968, 99, 503, 751, 245, 218, 493, 821, 431, 693, 148, 295, 809, 150, 282, 452, 71, 598, 587, 459, 682, 753, 46, 670, 936, 641, 177, 589, 835, 348, 481, 207, 989, 438, 125, 479, 760, 805, 333, 920, 672, 38, 723, 973, 586, 257, 455, 57, 243, 755, 37, 780, 670, 830, 255, 79, 121, 547, 325, 800, 578, 512, 410, 794, 632, 912, 324, 247, 67, 425, 688, 367, 122, 10, 264, 607, 169, 685, 119, 801, 872, 694, 513, 284, 703, 48, 784, 366, 856, 654, 836, 224, 792, 84, 244, 493, 908, 666, 857, 477, 312, 650, 890, 876, 361, 21, 393, 981, 158, 557, 749, 46, 328, 913, 567, 692, 38, 605, 476, 163, 746, 377, 622, 848, 578, 982, 683, 316, 396, 747, 906, 493, 341, 688, 59, 764, 957, 282, 769, 825};
 168:	48 8d 85 60 f4 ff ff 	lea    -0xba0(%rbp),%rax
 16f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 176 <main+0x2c>
 176:	b9 71 01 00 00       	mov    $0x171,%ecx
 17b:	48 89 c7             	mov    %rax,%rdi
 17e:	48 89 d6             	mov    %rdx,%rsi
 181:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
 184:	48 89 f2             	mov    %rsi,%rdx
 187:	48 89 f8             	mov    %rdi,%rax
 18a:	8b 0a                	mov    (%rdx),%ecx
 18c:	89 08                	mov    %ecx,(%rax)
  int size = sizeof(array) / sizeof(array[0]);
 18e:	c7 85 5c f4 ff ff e3 	movl   $0x2e3,-0xba4(%rbp)
 195:	02 00 00 
  printf("Unsortiertes Array: ");
 198:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 19f <main+0x55>
 19f:	48 89 c7             	mov    %rax,%rdi
 1a2:	b8 00 00 00 00       	mov    $0x0,%eax
 1a7:	e8 00 00 00 00       	call   1ac <main+0x62>
  printArray(array, size);
 1ac:	8b 95 5c f4 ff ff    	mov    -0xba4(%rbp),%edx
 1b2:	48 8d 85 60 f4 ff ff 	lea    -0xba0(%rbp),%rax
 1b9:	89 d6                	mov    %edx,%esi
 1bb:	48 89 c7             	mov    %rax,%rdi
 1be:	e8 00 00 00 00       	call   1c3 <main+0x79>
  bubbleSort(array, size);
 1c3:	8b 95 5c f4 ff ff    	mov    -0xba4(%rbp),%edx
 1c9:	48 8d 85 60 f4 ff ff 	lea    -0xba0(%rbp),%rax
 1d0:	89 d6                	mov    %edx,%esi
 1d2:	48 89 c7             	mov    %rax,%rdi
 1d5:	e8 00 00 00 00       	call   1da <main+0x90>
  printf("Sortiertes Array: ");
 1da:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1e1 <main+0x97>
 1e1:	48 89 c7             	mov    %rax,%rdi
 1e4:	b8 00 00 00 00       	mov    $0x0,%eax
 1e9:	e8 00 00 00 00       	call   1ee <main+0xa4>
  printArray(array, size);
 1ee:	8b 95 5c f4 ff ff    	mov    -0xba4(%rbp),%edx
 1f4:	48 8d 85 60 f4 ff ff 	lea    -0xba0(%rbp),%rax
 1fb:	89 d6                	mov    %edx,%esi
 1fd:	48 89 c7             	mov    %rax,%rdi
 200:	e8 00 00 00 00       	call   205 <main+0xbb>
 205:	b8 00 00 00 00       	mov    $0x0,%eax
}
 20a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 20e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 215:	00 00 
 217:	74 05                	je     21e <main+0xd4>
 219:	e8 00 00 00 00       	call   21e <main+0xd4>
 21e:	c9                   	leave  
 21f:	c3                   	ret    
